{"ast":null,"code":"var _jsxFileName = \"D:\\\\multicampus_coding\\\\ReactProject\\\\blind\\\\src\\\\mypost.jsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport $ from 'jquery';\nimport MyPostItems from './mypostItems';\nimport { Col } from 'react-bootstrap';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\naxios.defaults.withCredentials = true;\nconst headers = {\n  withCredentials: true\n};\n\nclass MyPost extends Component {\n  constructor(props) {\n    super(props);\n\n    this.ShowPosts = async () => {\n      const user_id = $.cookie(\"login_id\");\n      console.log(user_id);\n      const send_param = {\n        user_id,\n        headers\n      };\n\n      if (user_id) {\n        try {\n          const result = await axios.post('http://localhost:9090/post/allpost_mine', send_param);\n\n          if (result.data.myposts) {\n            this.setState({\n              myposts: result.data.myposts\n            });\n            this.setState({\n              visible: \"visible\"\n            });\n          }\n\n          console.log(result.data);\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        alert('로그인이 필요합니다');\n      }\n    };\n\n    this.update_post = post_id => {\n      this.setState({\n        update_form: \"inline-block\"\n      });\n      this.ShowPosts();\n      /* const user_id=$.cookie(\"login_id\");\r\n      const send_param={post_id, user_id};\r\n      console.log(send_param);\r\n      $.post('http://localhost:9090/post/update', send_param, (returnData)=>{\r\n          if(returnData.result){\r\n              alert(\"Post 수정완료\");\r\n          }else{\r\n              alert(\"수정 오류\");\r\n          }\r\n      }); */\n    };\n\n    this.delete_post = post_id => {\n      const user_id = $.cookie(\"login_id\");\n      const send_param = {\n        post_id,\n        user_id\n      };\n      console.log(send_param);\n      $.post('http://localhost:9090/post/delete', send_param, returnData => {\n        if (returnData.result) {\n          alert(\"Post 삭제완료\");\n          const filteredItems = this.state.myposts.filter(item => {\n            return item.key !== post_id;\n          });\n          this.setState({\n            myposts: filteredItems\n          });\n          this.ShowPosts();\n        } else {\n          alert(\"삭제 오류\");\n        }\n      });\n    };\n\n    this.state = {\n      myposts: [],\n      update_form: \"none\",\n      visible: \"hidden\"\n    };\n  }\n\n  componentDidMount() {\n    this.ShowPosts();\n  }\n\n  /*     checkMyPost=()=>{\r\n          if(this.state.myposts===[]){\r\n              const result = '등록된 게시글이 없습니다.';\r\n          }else{\r\n              const result = this.state.myposts.map((post) => {\r\n                  return <MyPostItems key={post.id} id={post.id} nickname={post.member.nickname} createDate={post.createdAt} UpdateDate={post.updatedAt} content={post.content} />\r\n                  });\r\n          }\r\n          return {result};\r\n      } */\n  render() {\n    const myPostList = {\n      visibility: this.state.visible\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: myPostList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"\\uAC8C\\uC2DC\\uBC88\\uD638\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"\\uC791\\uC131\\uC790\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"\\uC0DD\\uC131\\uC77C\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"\\uC218\\uC815\\uC77C\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"\\uB0B4\\uC6A9\"), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }))), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.state.myposts.map(post => {\n      return React.createElement(MyPostItems, {\n        key: post.id,\n        id: post.id,\n        nickname: post.member.nickname,\n        createDate: post.createdAt,\n        updateDate: post.updatedAt,\n        content: post.content,\n        superDelete: this.delete_post,\n        superUpdate: this.update_post,\n        entries: this.state.myposts,\n        showPosts: this.ShowPosts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      });\n    }), this.checkMyPost))));\n  }\n\n}\n\nexport default MyPost;","map":{"version":3,"sources":["D:/multicampus_coding/ReactProject/blind/src/mypost.jsx"],"names":["React","Component","axios","$","MyPostItems","Col","Table","TableBody","TableHead","TableRow","TableCell","defaults","withCredentials","headers","MyPost","constructor","props","ShowPosts","user_id","cookie","console","log","send_param","result","post","data","myposts","setState","visible","err","alert","update_post","post_id","update_form","delete_post","returnData","filteredItems","state","filter","item","key","componentDidMount","render","myPostList","visibility","map","id","member","nickname","createdAt","updatedAt","content","checkMyPost"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport $ from 'jquery';\r\nimport MyPostItems from './mypostItems';\r\nimport {Col} from 'react-bootstrap';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\n\r\naxios.defaults.withCredentials = true;\r\nconst headers = {withCredentials: true};\r\n\r\nclass MyPost extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            myposts: [],\r\n            update_form: \"none\",\r\n            visible: \"hidden\"\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        this.ShowPosts();\r\n    }\r\n    ShowPosts=async ()=>{\r\n        const user_id=$.cookie(\"login_id\");\r\n        console.log(user_id);\r\n        const send_param={user_id, headers};\r\n        if(user_id){\r\n            try{\r\n                const result = await axios.post('http://localhost:9090/post/allpost_mine', send_param);\r\n                if(result.data.myposts){\r\n                    this.setState({\r\n                        myposts: result.data.myposts\r\n                    });\r\n                    this.setState({visible: \"visible\"});\r\n                }\r\n                console.log(result.data);\r\n            }catch(err){\r\n                console.log(err);\r\n            }\r\n        }else{\r\n            alert('로그인이 필요합니다');\r\n        }\r\n    }\r\n    update_post=(post_id)=>{\r\n        this.setState({\r\n            update_form: \"inline-block\"\r\n        });\r\n        this.ShowPosts();\r\n        /* const user_id=$.cookie(\"login_id\");\r\n        const send_param={post_id, user_id};\r\n        console.log(send_param);\r\n        $.post('http://localhost:9090/post/update', send_param, (returnData)=>{\r\n            if(returnData.result){\r\n                alert(\"Post 수정완료\");\r\n            }else{\r\n                alert(\"수정 오류\");\r\n            }\r\n        }); */\r\n    }\r\n    delete_post=(post_id)=>{\r\n        const user_id=$.cookie(\"login_id\");\r\n        const send_param={post_id, user_id};\r\n        console.log(send_param);\r\n        $.post('http://localhost:9090/post/delete', send_param, (returnData)=>{\r\n            if(returnData.result){\r\n                alert(\"Post 삭제완료\");\r\n                const filteredItems = this.state.myposts.filter((item)=>{\r\n                    return item.key !== post_id\r\n                });\r\n                this.setState({\r\n                    myposts: filteredItems\r\n                });\r\n                this.ShowPosts();\r\n            }else{\r\n                alert(\"삭제 오류\");\r\n            }\r\n        });\r\n    }\r\n/*     checkMyPost=()=>{\r\n        if(this.state.myposts===[]){\r\n            const result = '등록된 게시글이 없습니다.';\r\n        }else{\r\n            const result = this.state.myposts.map((post) => {\r\n                return <MyPostItems key={post.id} id={post.id} nickname={post.member.nickname} createDate={post.createdAt} UpdateDate={post.updatedAt} content={post.content} />\r\n                });\r\n        }\r\n        return {result};\r\n    } */\r\n   \r\n    render(){\r\n        const myPostList={\r\n            visibility: this.state.visible\r\n        }\r\n        return(\r\n            <div>\r\n                <div style={myPostList}>\r\n                    <Table>\r\n                    <TableHead>\r\n                    <TableRow>\r\n                    <TableCell>게시번호</TableCell>\r\n                    <TableCell>작성자</TableCell>\r\n                    <TableCell>생성일</TableCell>\r\n                    <TableCell>수정일</TableCell>\r\n                    <TableCell>내용</TableCell>\r\n                    <TableCell></TableCell>\r\n                    <TableCell></TableCell>\r\n                    </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {this.state.myposts.map((post) => {\r\n                        return <MyPostItems key={post.id} id={post.id} nickname={post.member.nickname} createDate={post.createdAt} updateDate={post.updatedAt} content={post.content} \r\n                                superDelete={this.delete_post} superUpdate={this.update_post} entries={this.state.myposts} showPosts={this.ShowPosts}/>\r\n                        })}\r\n                        {this.checkMyPost}\r\n                    </TableBody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyPost;"]},"metadata":{},"sourceType":"module"}