{"ast":null,"code":"var _jsxFileName = \"D:\\\\multicampus_coding\\\\ReactProject\\\\blind\\\\src\\\\comment\\\\comments.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { InputGroup, FormControl, Button } from \"react-bootstrap\";\nimport CommentItem from \"./commentItem\";\nimport $ from \"jquery\";\naxios.defaults.withCredentials = true;\nconst headers = {\n  withCredentials: true\n};\n\nclass Comments extends Component {\n  constructor(props) {\n    super(props);\n\n    this.ShowComments = async () => {\n      const commentId = this.props.postId;\n      const send_param = {\n        commentId,\n        headers\n      };\n\n      try {\n        const result = await axios.post(\"http://localhost:9090/comment/allcomments\", send_param);\n\n        if (result.data.comments) {\n          this.setState({\n            comments: result.data.comments\n          });\n        }\n\n        console.log(result);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.comment_insert = async () => {\n      const send_param = {\n        headers,\n        comment: this.commentE.value,\n        postId: this.props.postId,\n        memberId: $.cookie(\"login_id\")\n      };\n\n      try {\n        await axios.post(\"http://localhost:9090/comment/insert\", send_param).then(returnData => {\n          if (returnData.data.message) {\n            alert(\"댓글 등록완료\");\n            this.ShowComments();\n          } else {\n            alert(\"댓글 등록실패\");\n          }\n\n          this.commentE.value = \"\";\n          this.commentE.focus();\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.state = {\n      comments: []\n    };\n  }\n\n  componentDidMount() {\n    this.ShowComments();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(InputGroup, {\n      size: \"sm\",\n      className: \"mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      ref: ref => this.commentE = ref,\n      \"aria-label\": \"Small\",\n      \"aria-describedby\": \"inputGroup-sizing-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.comment_insert,\n      size: \"sm\",\n      variant: \"outline-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"\\uB313\\uAE00 \\uB4F1\\uB85D\")), React.createElement(CommentItem, {\n      entries: this.state.comments,\n      postId: this.props.postId,\n      ShowComments: this.ShowComments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Comments;","map":{"version":3,"sources":["D:/multicampus_coding/ReactProject/blind/src/comment/comments.jsx"],"names":["React","Component","axios","InputGroup","FormControl","Button","CommentItem","$","defaults","withCredentials","headers","Comments","constructor","props","ShowComments","commentId","postId","send_param","result","post","data","comments","setState","console","log","err","comment_insert","comment","commentE","value","memberId","cookie","then","returnData","message","alert","focus","state","componentDidMount","render","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { InputGroup, FormControl, Button } from \"react-bootstrap\";\r\nimport CommentItem from \"./commentItem\";\r\nimport $ from \"jquery\";\r\n\r\naxios.defaults.withCredentials = true;\r\nconst headers = { withCredentials: true };\r\n\r\nclass Comments extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      comments: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.ShowComments();\r\n  }\r\n  ShowComments = async () => {\r\n    const commentId = this.props.postId;\r\n    const send_param = { commentId, headers };\r\n    try {\r\n      const result = await axios.post(\"http://localhost:9090/comment/allcomments\", send_param);\r\n      if (result.data.comments) {\r\n        this.setState({\r\n          comments: result.data.comments\r\n        });\r\n      }\r\n      console.log(result);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  comment_insert = async () => {\r\n    const send_param = {\r\n      headers,\r\n      comment: this.commentE.value,\r\n      postId: this.props.postId,\r\n      memberId: $.cookie(\"login_id\")\r\n    };\r\n    try {\r\n      await axios.post(\"http://localhost:9090/comment/insert\", send_param).then(returnData => {\r\n        if (returnData.data.message) {\r\n          alert(\"댓글 등록완료\");\r\n          this.ShowComments();\r\n        } else {\r\n          alert(\"댓글 등록실패\");\r\n        }\r\n        this.commentE.value = \"\";\r\n        this.commentE.focus();\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <InputGroup size=\"sm\" className=\"mb-3\">\r\n          <FormControl\r\n            ref={ref => (this.commentE = ref)}\r\n            aria-label=\"Small\"\r\n            aria-describedby=\"inputGroup-sizing-sm\"\r\n          />\r\n          <Button onClick={this.comment_insert} size=\"sm\" variant=\"outline-dark\">\r\n            댓글 등록\r\n          </Button>\r\n        </InputGroup>\r\n        <CommentItem\r\n          entries={this.state.comments}\r\n          postId={this.props.postId}\r\n          ShowComments={this.ShowComments}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}